name: ie-bank-backend

on:
  push:
    paths:
      - "backend/**"
    branches:
      - "*" # This will run on any branch
  pull_request:
    branches: ["main"]
    paths:
      - "backend/**"
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  BACKEND_WEBAPP_DEV: dkumlin-be-dev
  BACKEND_WEBAPP_UAT: dkumlin-be-uat # Add this line for UAT webapp name
  CONTAINER_REGISTRY_SERVER_URL_DEV: dkumlinacrdev.azurecr.io
  IMAGE_NAME_DEV: dkumlin-be-dev
  KEY_VAULT_NAME_DEV: dkumlin-keyVault-dev
  KEY_VAULT_SECRET_ACR_USERNAME: acr-username
  KEY_VAULT_SECRET_ACR_PASSWORD0: acr-password0

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ENV: ghci
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      PYTHONPATH: backend
    outputs:
      image-version: ${{ steps.image-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v3

      - name: Install dependencies
        run: pip install -r backend/requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8 pytest
          flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: python -m pytest -v

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Docker Registry Credentials
        id: acr-creds
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "::add-mask::$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_ACR_USERNAME }} --vault-name ${{ env.KEY_VAULT_NAME_DEV }} --query value -o tsv)"
            echo "::add-mask::$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_ACR_PASSWORD0 }} --vault-name ${{ env.KEY_VAULT_NAME_DEV }} --query value -o tsv)"
            echo "username=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_ACR_USERNAME }} --vault-name ${{ env.KEY_VAULT_NAME_DEV }} --query value -o tsv)" >> $GITHUB_OUTPUT
            echo "password=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_ACR_PASSWORD0 }} --vault-name ${{ env.KEY_VAULT_NAME_DEV }} --query value -o tsv)" >> $GITHUB_OUTPUT

      - name: Debug (remove in production)
        run: |
          echo "Registry server: ${{ env.CONTAINER_REGISTRY_SERVER_URL_DEV }}"
          echo "Username is set: ${{ steps.acr-creds.outputs.username }}"
          echo "Password is set: ${{ steps.acr-creds.outputs.password }}"

      - name: Docker Login
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.CONTAINER_REGISTRY_SERVER_URL_DEV }}
          username: ${{ steps.acr-creds.outputs.username }}
          password: ${{ steps.acr-creds.outputs.password }}

      - name: Set Image Version
        id: image-version
        run: echo "version=$(date +'%Y.%m.%d.%H.%M')" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        run: |
          docker build backend/ -t ${{ env.CONTAINER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME_DEV }}:${{ steps.image-version.outputs.version }}
          docker tag ${{ env.CONTAINER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME_DEV }}:${{ steps.image-version.outputs.version }} ${{ env.CONTAINER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME_DEV }}:latest
          docker push ${{ env.CONTAINER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME_DEV }}:${{ steps.image-version.outputs.version }}
          docker push ${{ env.CONTAINER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME_DEV }}:latest

      - name: Upload Artifact for Deployment
        uses: actions/upload-artifact@v4
        with:
          name: backend-docker-image
          path: backend

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Development"
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-docker-image
          path: backend

      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.BACKEND_WEBAPP_DEV }}
          images: "${{ env.CONTAINER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME_DEV }}:${{ needs.build.outputs.image-version }}"

  deploy-uat:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "UAT"
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-docker-image
          path: backend

      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App (UAT)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.BACKEND_WEBAPP_UAT }}
          images: "${{ env.CONTAINER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME_DEV }}:${{ needs.build.outputs.image-version }}"
